import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
import datetime
import asyncio
import os

#----–°–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç---
os.makedirs("data", exist_ok=True)

# === –ö–æ–Ω—Ñ–∏–≥ ===
from config import TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# === –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ ===
AVAILABLE_CITIES = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–û–º—Å–∫",
    "–°–∞–º–∞—Ä–∞", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"
]

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
conn = sqlite3.connect("data/applications.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS applications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    city TEXT,
    topic TEXT,
    description TEXT,
    status TEXT DEFAULT '–ù–µ —Ä–µ—à–µ–Ω–∞',
    user_id INTEGER
)
""")
conn.commit()

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    city = State()
    topic = State()
    description = State()

class AdminReply(StatesGroup):
    waiting_for_reply = State()

class ProblemReason(StatesGroup):
    waiting_for_reason = State()

class StatsForm(StatesGroup):
    start_date = State()
    end_date = State()
    city = State()
    topic = State()


# === –†–æ—É—Ç–µ—Ä—ã ===
router = Router()


# ====== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å ======

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    await state.set_state(Form.city)


@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    text = message.text.strip()
    matches = [c for c in AVAILABLE_CITIES if c.lower().startswith(text.lower())]

    if len(matches) == 1 and matches[0].lower() == text.lower():
        await state.update_data(city=matches[0])
        await message.answer(f"–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: {matches[0]}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:")
        await state.set_state(Form.topic)
    elif matches:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[msg] for msg in matches],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:", reply_markup=keyboard)
    else:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(Form.topic)
async def process_topic(message: Message, state: FSMContext):
    await state.update_data(topic=message.text.strip())
    await message.answer("–û–ø–∏—à–∏—Ç–µ –∑–∞—è–≤–∫—É:")
    await state.set_state(Form.description)


@router.message(Form.description)
async def process_description(message: Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data["city"]
    topic = user_data["topic"]
    description = message.text.strip()
    date = datetime.datetime.now().strftime("%d.%m.%Y")
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    cursor.execute(
        "INSERT INTO applications (date, city, topic, description, user_id) VALUES (?, ?, ?, ?, ?)",
        (date, city, topic, description, message.from_user.id)
    )
    conn.commit()

    app_id = cursor.lastrowid  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0

    await message.answer(
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{app_id} –ø—Ä–∏–Ω—è—Ç–∞. –°—Ç–∞—Ç—É—Å: –ù–µ —Ä–µ—à–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    )
    await state.clear()
    try:
        await message.bot.send_message(
            ADMIN_ID,
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{app_id}</b>\n"
            f"üë§ –û—Ç: {first_name} (@{username} | ID: {user_id})\n"
            f"üèô –ì–æ—Ä–æ–¥: {city}\n"
            f"üìå –¢–µ–º–∞: {topic}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üïí –î–∞—Ç–∞: {date}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>–ù–µ —Ä–µ—à–µ–Ω–∞</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


# ====== –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å ======

@router.message(Command("admin"))
async def admin_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT id, date, city, topic, description, status FROM applications ORDER BY id")
    apps = cursor.fetchall()

    if not apps:
        await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
    for app in apps:
        text += (f"#{app[0]} [{app[5]}]\n–î–∞—Ç–∞: {app[1]}\n–ì–æ—Ä–æ–¥: {app[2]}\n"
                 f"–¢–µ–º–∞: {app[3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {app[4]}\n\n")
    text += "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/reply <id>"
    await message.answer(text)


@router.message(Command("reply"))
async def admin_reply_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /reply <–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏>")
        return

    app_id = int(parts[1])
    cursor.execute("SELECT user_id FROM applications WHERE id=?", (app_id,))
    row = cursor.fetchone()
    if not row:
        await message.answer("–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.update_data(app_id=app_id)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ #{app_id}:")
    await state.set_state(AdminReply.waiting_for_reply)


@router.message(AdminReply.waiting_for_reply)
async def admin_send_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    app_id = data["app_id"]

    cursor.execute("SELECT user_id FROM applications WHERE id=?", (app_id,))
    user_row = cursor.fetchone()
    if not user_row:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    user_id = user_row[0]
    await message.bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{app_id}:\n\n{message.text}")
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await state.clear()

    asyncio.create_task(ask_resolution_later(message.bot, user_id, app_id))


async def ask_resolution_later(bot: Bot, user_id: int, app_id: int):
    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç
    cursor.execute("SELECT status FROM applications WHERE id=?", (app_id,))
    status_row = cursor.fetchone()
    if not status_row or status_row[0] == "–†–µ—à–µ–Ω–∞":
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"resolve_yes:{app_id}"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"resolve_no:{app_id}")]
    ])
    await bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{app_id} —Ä–µ—à–µ–Ω–∞?", reply_markup=keyboard)


@router.callback_query(F.data.startswith("resolve_yes"))
async def callback_resolve_yes(callback: CallbackQuery):
    app_id = int(callback.data.split(":")[1])
    cursor.execute("UPDATE applications SET status='–†–µ—à–µ–Ω–∞' WHERE id=?", (app_id,))
    conn.commit()
    await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ, –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–∞—è.")
    await callback.answer()


@router.callback_query(F.data.startswith("resolve_no"))
async def callback_resolve_no(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split(":")[1])
    await state.update_data(app_id=app_id)
    await callback.message.edit_text("–ß—Ç–æ –Ω–µ —Ç–∞–∫? –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(ProblemReason.waiting_for_reason)
    await callback.answer()


@router.message(ProblemReason.waiting_for_reason)
async def process_problem_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    app_id = data["app_id"]

    await message.bot.send_message(
        ADMIN_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞—è–≤–∫–µ #{app_id} –ø–∏—à–µ—Ç:\n\n{message.text}\n\n"
        f"–û—Ç–≤–µ—Ç—å—Ç–µ /reply {app_id}"
    )

    cursor.execute("UPDATE applications SET status='–ù–µ —Ä–µ—à–µ–Ω–∞' WHERE id=?", (app_id,))
    conn.commit()

    await message.answer("–°–ø–∞—Å–∏–±–æ, –ø–µ—Ä–µ–¥–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, –∏ —è —Å–Ω–æ–≤–∞ —Å–ø—Ä–æ—à—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
    await state.clear()


# ====== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ======

@router.message(Command("stats"))
async def stats_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(StatsForm.start_date)


@router.message(StatsForm.start_date)
async def stats_get_start_date(message: Message, state: FSMContext):
    await state.update_data(start_date=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(StatsForm.end_date)


@router.message(StatsForm.end_date)
async def stats_get_end_date(message: Message, state: FSMContext):
    await state.update_data(end_date=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(StatsForm.city)


@router.message(StatsForm.city)
async def stats_get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(StatsForm.topic)


@router.message(StatsForm.topic)
async def stats_show(message: Message, state: FSMContext):
    data = await state.get_data()
    start_date = data["start_date"]
    end_date = data["end_date"]
    city = data["city"]
    topic = message.text.strip()

    query = "SELECT status, city, topic, date FROM applications WHERE 1=1"
    params = []

    def date_to_compare(date_str):
        d, m, y = date_str.split(".")
        return f"{y}-{m}-{d}"

    if start_date != "-":
        try:
            query += " AND date(substr(date,7,4) || '-' || substr(date,4,2) || '-' || substr(date,1,2)) >= ?"
            params.append(start_date)
        except Exception:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            await state.clear()
            return

    if end_date != "-":
        try:
            query += " AND date(substr(date,7,4) || '-' || substr(date,4,2) || '-' || substr(date,1,2)) <= ?"
            params.append(end_date)
        except Exception:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            await state.clear()
            return

    if city != "-":
        query += " AND city = ?"
        params.append(city)

    if topic != "-":
        query += " AND topic = ?"
        params.append(topic)

    cursor.execute(query, tuple(params))
    rows = cursor.fetchall()

    total = len(rows)
    solved = sum(1 for r in rows if r[0] == "–†–µ—à–µ–Ω–∞")
    unsolved = total - solved

    city_stats = {}
    topic_stats = {}

    if city == "-":
        for r in rows:
            city_stats[r[1]] = city_stats.get(r[1], 0) + 1
    if topic == "-":
        for r in rows:
            topic_stats[r[2]] = topic_stats.get(r[2], 0) + 1

    msg = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n\n"
           f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}\n"
           f"‚úÖ –†–µ—à–µ–Ω–æ: {solved}\n"
           f"‚ùå –ù–µ —Ä–µ—à–µ–Ω–æ: {unsolved}\n\n")

    if city_stats:
        msg += "–ü–æ –≥–æ—Ä–æ–¥–∞–º:\n"
        for c, count in city_stats.items():
            msg += f" - {c}: {count}\n"

    if topic_stats:
        msg += "\n–ü–æ —Ç–µ–º–∞–º:\n"
        for t, count in topic_stats.items():
            msg += f" - {t}: {count}\n"

    await message.answer(msg)
    await state.clear()


# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======

async def main():
    bot = Bot(token=TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
